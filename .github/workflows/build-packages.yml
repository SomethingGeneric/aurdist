name: Build AUR Packages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:  # Allow manual triggering

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-packages:
    runs-on: ubuntu-latest
    container:
      image: docker.io/library/archlinux:latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Update system and install dependencies
      run: |
        # Update the system
        pacman -Syu --noconfirm
        
        # Install required dependencies
        pacman -S --noconfirm base-devel pacman-contrib git rsync curl jq python python-requests openssh sudo
        
        # Create a build user (makepkg cannot run as root)
        useradd -m -G wheel builduser
        echo 'builduser ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
    
    - name: Set up workspace permissions
      run: |
        # Get the current working directory and set proper ownership
        WORKSPACE_DIR=$(pwd)
        echo "Workspace directory: $WORKSPACE_DIR"
        chown -R builduser:builduser "$WORKSPACE_DIR"
        
        # Verify targets.txt exists
        ls -la targets.txt
        echo "Target packages to build:"
        cat targets.txt
    
    - name: Configure pacman for recursive AUR building
      run: |
        # Create packages directory if it doesn't exist
        WORKSPACE_DIR=$(pwd)
        mkdir -p "$WORKSPACE_DIR/packages"
        
        # Add aurdist repository to pacman.conf for recursive building
        # This allows packages to depend on other packages we've already built
        echo "" >> /etc/pacman.conf
        echo "[aurdist]" >> /etc/pacman.conf
        echo "SigLevel = Never" >> /etc/pacman.conf
        echo "Server = https://aur.mattcompton.dev/" >> /etc/pacman.conf
        echo "Server = file://$WORKSPACE_DIR/packages" >> /etc/pacman.conf
        echo "Added aurdist repository to pacman.conf:"
        tail -n 6 /etc/pacman.conf

    - name: Configure workspace for remote syncing
      run: |
        # Create .where file for rsync destination
        WORKSPACE_DIR=$(pwd)
        echo "root@h.goober.cloud:/var/www/aur" > "$WORKSPACE_DIR/.where"
        echo "Created .where file for remote syncing:"
        cat "$WORKSPACE_DIR/.where"
        chown builduser:builduser "$WORKSPACE_DIR/.where"

    - name: Set up SSH key
      run: |
        # Create SSH directory for builduser
        sudo -u builduser mkdir -p /home/builduser/.ssh
        
        # Set up SSH key from secrets
        echo "$SSH_KEY" | sudo -u builduser tee /home/builduser/.ssh/id_rsa > /dev/null
        chmod 600 /home/builduser/.ssh/id_rsa
        
        # Add the remote host to known_hosts to avoid host key verification
        sudo -u builduser ssh-keyscan -p 2022 h.goober.cloud >> /home/builduser/.ssh/known_hosts 2>/dev/null || true
        chmod 644 /home/builduser/.ssh/known_hosts
        
        # Configure SSH to use the correct port for this host
        echo "Host h.goober.cloud" | sudo -u builduser tee /home/builduser/.ssh/config > /dev/null
        echo "  Port 2022" | sudo -u builduser tee -a /home/builduser/.ssh/config > /dev/null
        echo "  StrictHostKeyChecking no" | sudo -u builduser tee -a /home/builduser/.ssh/config > /dev/null
        sudo -u builduser chmod 600 /home/builduser/.ssh/config
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}

    - name: Build AUR packages
      run: |
        # Switch to builduser and run the build process with remote destination checking
        WORKSPACE_DIR=$(pwd)
        sudo -u builduser bash -c "
          cd '$WORKSPACE_DIR'
          echo 'Starting AUR package build process with remote destination checking...'
          python aurutil.py --remote-dest root@h.goober.cloud:/var/www/aur --force --debug --no-cleanup
        "
    
    - name: Verify and create repository database
      run: |
        WORKSPACE_DIR=$(pwd)
        sudo -u builduser bash -c "
          cd '$WORKSPACE_DIR'
          
          # Check if packages directory exists and has packages
          if [ -d packages ]; then
            echo 'Contents of packages directory:'
            ls -la packages/
            
            # Check for package files
            if ls packages/*.pkg.tar.zst 1> /dev/null 2>&1; then
              echo 'Found package files, creating repository database...'
              cd packages
              repo-add -vn aurdist.db.tar.zst *.pkg.tar.zst
              echo 'Repository database created successfully'
              ls -la aurdist.db*
            else
              echo 'No package files found in packages directory'
              exit 1
            fi
          else
            echo 'Packages directory not found'
            exit 1
          fi
        "
    
    - name: Create repository archive
      run: |
        # Create a compressed archive of the entire packages directory
        # This avoids issues with special characters in filenames (like : in repo database files)
        sudo -u builduser bash -c "
          cd /tmp
          tar -czf repo.tar.zst -C '$WORKSPACE_DIR' packages/
          mv repo.tar.zst '$WORKSPACE_DIR/'
          echo 'Repository archive created:'
          ls -la '$WORKSPACE_DIR/repo.tar.zst'
        "
      env:
        WORKSPACE_DIR: ${{ github.workspace }}
    
    - name: Upload packages as artifact
      uses: actions/upload-artifact@v4
      with:
        name: aurdist-packages
        path: repo.tar.zst
        retention-days: 30
        if-no-files-found: error
    
    - name: Deploy with rsync
      uses: burnett01/rsync-deployments@7.1.0
      with:
        switches: -avzr --delete
        path: packages/
        remote_path: /var/www/aur/
        remote_host: h.goober.cloud
        remote_port: 2022
        remote_user: root
        remote_key: ${{ secrets.SSH_KEY }}
